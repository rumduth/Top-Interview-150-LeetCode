class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        if(n == 0 || n == 1)
            return intervals;
        vector<vector<int>> ans;
        sort(intervals.begin(),intervals.end());
        int s = intervals[0][0];
        int e = intervals[0][1];

        for(int i = 1; i < n; i++)
        {
            if( (e <= intervals[i][1] && intervals[i][0] <= e) || e >= intervals[i][1] )
            {
                s = min(intervals[i][0],s);
                e = max(intervals[i][1],e);
            }
            else
            {
                ans.push_back({s,e});
                s = intervals[i][0];
                e = intervals[i][1];
            }
        }
        ans.push_back({s,e});
        return ans;

    }
};


Time Complexity: O(N)
Space Complexity: O(1)

Note:: There are three cases when comapare two sorted line. inside, half-in-half-out, and outside
