class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n,0));
        for(int dis = 1; dis <= n; dis++)
        {
            for(int i = 0; i < n; i++)
            {
                int j = i + dis - 1;
                if(i == j)
                    dp[i][j] = 1;
                else if(j>=n) continue;
                else if(s[i] == s[j])
                {
                    if(i+1 >=n || j-1 < 0)
                        dp[i][j] = 2;
                    else
                        dp[i][j] = 2 + dp[i+1][j-1];
                }
                else
                {
                    if(i+1 >= n || j-1 < 0)
                        dp[i][j] = 1;
                    else
                        dp[i][j] = max(dp[i+1][j],dp[i][j-1]);
                }
            }
        }
        int max_val = dp[0][0];
        int start = 0;
        int end = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n ; j++)
            {
                if(max_val < dp[i][j] && dp[i][j] == j - i + 1)
                {
                    max_val = dp[i][j];
                    start = i;
                    end = j;
                }
            }
        }

        return s.substr(start,end-start+1);
    }
};
