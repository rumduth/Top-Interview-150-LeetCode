class RandomizedSet {
public:
    unordered_map<int, int> m;
    vector<int> v;
    int index;
    RandomizedSet() {
        index = -1;
    }
    
    bool insert(int val) {
        if( !m.count(val) || (m.count(val) && m[val] == -1))
        {
            index++;
            m[val] = index;
            v.push_back(val);
            return true;

        }
        return false;
    }
    
    bool remove(int val) {
        if(!m.count(val) || (m.count(val) && m[val] == -1))
            return false;
        int lastIndex = index;
        int remove_index = m[val];
        if(lastIndex == remove_index)
        {
            v.pop_back();
            m[val] = -1;
            index--;
        }
        else
        {
            swap(v[remove_index],v[lastIndex]);
            m[v[lastIndex]] = -1;
            m[v[remove_index]] = remove_index;
            v.pop_back();
            index--;
        }
        return true;
    }
    
    int getRandom() {
        int n = rand() % v.size();
        return v[n];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
