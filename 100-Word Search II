class Solution {
public:
    struct TrieNode
        {
            bool isTerminal;
            vector<TrieNode*> next;
            string w;
            TrieNode()
            {
                isTerminal = false;
                next.resize(26);
                w = "";
                for(auto& i: next) i = NULL;
            }
        };

    struct Trie
    {
        TrieNode* root;
        Trie()
        {
            root = new TrieNode();
        }
        void add(string word)
        {
            TrieNode* r = root;
            for(int i = 0; i < word.size(); i++)
            {
                if(r->next[word[i] - 'a'] == NULL)
                    r->next[word[i] - 'a'] = new TrieNode();
                r = r->next[word[i] - 'a'];
            }
            r->isTerminal = true;
            r->w = word;
        }
    };
    void dfs(vector<string>& ans, vector<vector<char>>& board, TrieNode* root, int i, int j)
    {
        if(root == NULL)
            return;
        if(root->isTerminal)
        {
            root->isTerminal = false;
            ans.push_back(root->w);
        }
        if(i < 0 || i == board.size() || j < 0 || j == board[0].size())
            return;
        if(board[i][j] == '$')
            return;
        char x = board[i][j];
        board[i][j] = '$';
        dfs(ans,board,root->next[x-'a'],i+1, j);
        dfs(ans,board,root->next[x-'a'],i-1, j);
        dfs(ans,board,root->next[x-'a'],i, j+1);
        dfs(ans,board,root->next[x-'a'],i, j-1);
        board[i][j] = x;
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        int m = board.size();
        int n = board[0].size();
        Trie t;
        for(int i = 0; i < words.size(); i++)
            t.add(words[i]);

        vector<string> ans;
        unordered_map<char, bool> start;
        for(auto& i : words)
            if(!start.count(i[0]))
                start[i[0]] = true;

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(start.count(board[i][j]))
                {
                    dfs(ans, board,t.root,i,j);
                }
        
        return ans;

      
                    

    }
};
