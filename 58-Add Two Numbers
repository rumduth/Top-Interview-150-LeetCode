/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        int carry = 0;
        ListNode* ans = NULL;
        ListNode* l = NULL;
        while(l1 != NULL && l2 != NULL)
        {
            int sum = (l1->val + l2->val + carry);
            if(sum >= 10)
            {
                if(l == NULL)
                {
                    l = new ListNode(sum - 10);
                    ans = l;
                }
                else
                {
                    l->next = new ListNode(sum - 10);
                    l = l->next;
                }
                carry = 1;
            }
            else
            {
                if(l == NULL)
                {
                    l = new ListNode(sum);
                    ans = l;
                }
                else
                {
                    l->next = new ListNode(sum);
                    l = l->next;

                }
                carry = 0;
            }
            l1 = l1->next;
            l2 = l2->next;
        }

        if(l1 == NULL && l2 == NULL)
        {
            if(carry == 0)
                return ans;
            else 
            {
                l->next = new ListNode(1);
                return ans;
            }
        }
        else if(l1 == NULL)
        {
            while(l2 != NULL)
            {
                int sum = carry + l2->val;
                if(sum >= 10)
                {
                    l->next = new ListNode(sum - 10);
                    l = l->next;
                    carry = 1;
                }
                else
                {
                    l->next = new ListNode(sum);
                    l = l->next;
                    carry = 0;
                }
                l2 = l2->next;
            }
            if(carry == 1)
                l->next = new ListNode(1);
            return ans;
        }
        else if(l2 == NULL)
        {
            while(l1 != NULL)
            {
                int sum = carry + l1->val;
                if(sum >= 10)
                {
                    l->next = new ListNode(sum - 10);
                    l = l->next;
                    carry = 1;
                }
                else
                {
                    l->next = new ListNode(sum);
                    l = l->next;
                    carry = 0;
                }
                l1 = l1->next;
            }
            if(carry == 1)
                l->next = new ListNode(1);
            return ans;
        }
        return ans;
    }
};

Time Complexity: O(N)
Space Complexity: O(1)
