class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.size() != t.size())
            return false;
        unordered_map<char, char> m;
        for(int i = 0; i < s.size(); i++)
        {
            if(!m.count(s[i]))
                m[s[i]] = t[i];
            else
                if(m[s[i]] != t[i])
                    return false;
        }
        m.clear();
        for(int i = 0; i<s.size(); i++)
        {
            if(!m.count(t[i]))
                m[t[i]] = s[i];
            else
                if(m[t[i]] != s[i])
                    return false;
        }
        return true;

    }
};

Time Complexity: O(N)
Space Complexity: O(N)

Note:: I believe the test case in Leet Code of this problem is broken. CPP VERSION
