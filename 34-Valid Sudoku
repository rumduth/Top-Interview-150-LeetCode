class Solution {
public:
    bool checkRow(vector<vector<char>>& board)
    {
        unordered_map<char, int> m;
        for(int i = 0; i < 9; i++)
        {
            m.clear();
            for(int j = 0; j < 9; j++)
            {
                m[board[i][j]]++;
                if(m[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
        }
        return true;
    }
    bool checkCol(vector<vector<char>>& board)
    {
        unordered_map<char, int> m;
        for(int j = 0; j < 9; j++)
        {
            m.clear();
            for(int i = 0; i < 9; i++)
            {
                m[board[i][j]]++;
                if(m[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
        }
        return true;
    }
    
    bool checkBox(vector<vector<char>>& board)
    {
        unordered_map<char, int> m1;
        unordered_map<char, int> m2;
        unordered_map<char, int> m3;
        m1.clear();
        m2.clear();
        m3.clear();
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                m1[board[i][j]]++;
                if(m1[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
            for(int j = 3; j < 6; j++)
            {
                m2[board[i][j]]++;
                if(m2[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
            for(int j = 6; j < 9; j++)
            {
                m3[board[i][j]]++;
                if(m3[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
        }
        m1.clear();
        m2.clear();
        m3.clear();
        for(int i = 3; i < 6; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                m1[board[i][j]]++;
                if(m1[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
            for(int j = 3; j < 6; j++)
            {
                m2[board[i][j]]++;
                if(m2[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
            for(int j = 6; j < 9; j++)
            {
                m3[board[i][j]]++;
                if(m3[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
        }
        m1.clear();
        m2.clear();
        m3.clear();
        for(int i = 6; i < 9; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                m1[board[i][j]]++;
                if(m1[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
            for(int j = 3; j < 6; j++)
            {
                m2[board[i][j]]++;
                if(m2[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
            for(int j = 6; j < 9; j++)
            {
                m3[board[i][j]]++;
                if(m3[board[i][j]] == 2 && board[i][j] != '.')
                    return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        bool a = checkRow(board);
        bool b = checkCol(board);
        bool c = checkBox(board);
        return a && b && c;
    }
};

Time Complexity: O(N)
Space Complexity: O(9) --> O(1) because the size of board is 9 in all case.
