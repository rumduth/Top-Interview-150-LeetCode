class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
       
        priority_queue< pair<long,pair<int,int>>, vector<pair<long,pair<int,int>>>, greater<pair<long,pair<int,int>>>> pq;
        vector<vector<int>> ans;
        map<pair<int,int>,bool> check_pair;
        pq.push({nums1[0] + nums2[0],{0,0}});
        check_pair[{0,0}] = true;
        while(!pq.empty())
        {
            auto f = pq.top();
            pq.pop();
            k--;
            ans.push_back({nums1[f.second.first],nums2[f.second.second]});
            if(k == 0)
                return ans;
            
            int i = f.second.first;
            int j = f.second.second;
            if(i + 1 == nums1.size() && j + 1 == nums2.size())
                continue;
            else if(i + 1 == nums1.size())
            {
                if(!check_pair.count({i,j+1}))
                {
                    pq.push({nums1[i] + nums2[j+1],{i, j+1}});
                    check_pair[{i,j+1}] = true;
                }
            }
            else if(j + 1 == nums2.size())
            {
                if(!check_pair.count({i+1,j}))
                {
                    pq.push({nums1[i+1] + nums2[j],{i+1,j}});
                    check_pair[{i+1,j}] = true;
                }
            }
            else
            {
                if(!check_pair.count({i,j+1}))
                {
                    pq.push({nums1[i] + nums2[j+1],{i, j+1}});
                    check_pair[{i,j+1}] = true;
                }
                 if(!check_pair.count({i+1,j}))
                {
                    pq.push({nums1[i+1] + nums2[j],{i+1,j}});
                    check_pair[{i+1,j}] = true;
                }
            }
        }
        return ans;


 
    }
};
