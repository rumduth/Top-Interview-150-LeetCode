class Solution {
public:
    int count(vector<vector<int>>& board, int i, int j)
    {
        int m = board.size();
        int n = board[0].size();
        int count = 0;
        vector<pair<int,int>> dir = {{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{1,-1},{-1,1},{1,1}};
        for(int k = 0; k < 8; k++)
        {
            int new_i = i + dir[k].first;
            int new_j = j + dir[k].second;
            if(new_i < 0 || new_i >= m || new_j < 0 || new_j >= n)
                continue;
            if(board[new_i][new_j] == 1 ||
               board[new_i][new_j] == 2 || 
               board[new_i][new_j] == 3 || 
               board[new_i][new_j] == 4)
            count++;
        }
        return count;

    }
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size();
        int n = board[0].size();
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                int c = count(board,i,j);
                if(board[i][j] == 0 && c == 3)
                    board[i][j] = 5;
                else if(board[i][j] == 1)
                {
                    if(c < 2)
                        board[i][j] = 2;
                    else if(c >= 2 && c <= 3)
                        board[i][j] = 3;
                    else if(c > 3)
                        board[i][j] = 4;
                }
            }
        }
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j<n; j++)
            {
                cout<<board[i][j]<<' ';
            }
            cout<<endl;
        }
      
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(board[i][j] == 2)
                    board[i][j] = 0;
                else if(board[i][j] == 3)
                    board[i][j] = 1;
                else if(board[i][j] == 4)
                    board[i][j] = 0;
                else if(board[i][j] == 5)
                    board[i][j] = 1;
            }
        }
    }
};

/*
fewer than 2 live neighbors: die
two or three -> live
more than 3 -> die
exactly 3 live cell -> dead -> live

Need to maintain the past and current while not changing anything
    Current   Next
2   1         0.    fewer than 2 live neighbors: die
3   1         1     two or three -> live
4   1         0     more than 3 -> die
5   0         1     exactly 3 live cell -> dead -> live


*/


Time Complexity: O(N)
Space Complexity: O(1)
