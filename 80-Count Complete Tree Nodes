/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
  

    void helper(TreeNode* root, int& ans)
    {
        if(root == NULL)
            return;
        TreeNode* left = root;
        TreeNode* right = root;
        int l_count = 1;
        int r_count = 1;
        while(left->left)
        {
            left = left->left;
            l_count++;
        }
        while(right->right)
        {
            right = right->right;
            r_count++;
        }
        if(l_count == r_count)
        {
            ans += pow(2,l_count) - 1;
            return;
        }
        ans += 1;
        helper(root->left,ans);
        helper(root->right,ans);
    }


    int countNodes(TreeNode* root) {
       int ans = 0;
       helper(root, ans);
       return ans;
    }
};

Time Complexity: O(logN * logN)
Space Complexity: O(1)
