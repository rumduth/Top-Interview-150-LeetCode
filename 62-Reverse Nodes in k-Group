/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* dummy = new ListNode();
        dummy->next = head;
        ListNode* h = head;
        int count = 0;
        while(h != NULL)
        {
            count++;
            h = h->next;
        }
        cout<<count<<endl;
        if(count < k)
            return head;

        int rem = count % k;
        if(rem == 0)
        {
            ListNode* before_segment = dummy;
            ListNode* prev = NULL;
            ListNode* current = head;
            for(int i = 0; i < count / k; i++)
            {
                ListNode* start_segment = current;
                int j = 1;
                while(j < k)
                {
                    ListNode* nextCurrent = current->next;
                    current->next = prev;
                    prev = current;
                    current = nextCurrent;
                    j++;
                }
                ListNode* nextCurrent = current->next;
                current->next = prev;
                before_segment->next = current;
                before_segment = start_segment;
                current = nextCurrent;
                start_segment->next = NULL;
            }
        }
        else
        {
            ListNode* before_segment = dummy;
            ListNode* prev = NULL;
            ListNode* current = head;
            for(int i = 0; i < count / k; i++)
            {
                ListNode* start_segment = current;
                int j = 1;
                while(j < k)
                {
                    ListNode* nextCurrent = current->next;
                    current->next = prev;
                    prev = current;
                    current = nextCurrent;
                    j++;
                }
                ListNode* nextCurrent = current->next;
                current->next = prev;
                before_segment->next = current;
                before_segment = start_segment;
                current = nextCurrent;
                start_segment->next = NULL;
            }
            before_segment->next = current;

        }
        return dummy->next;
    }
};

Time Complexity: O(N)
Space Complexity: O(1)
