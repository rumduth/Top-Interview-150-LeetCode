class Solution {
public:
    void dfs(int i, int j, vector<vector<char>>& board, vector<vector<bool>>& visited)
    {
        if(i < 0 || i == board.size() || j < 0 || j == board[0].size())
            return;
        if(board[i][j] == 'X' || visited[i][j] == true)
            return;
        visited[i][j] = true;
        dfs(i+1,j,board,visited);
        dfs(i-1,j,board,visited);
        dfs(i,j+1,board,visited);
        dfs(i,j-1,board,visited);
    }
    void solve(vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        for(int i = 0; i < m; i++)
            if(board[i][0] == 'O' && visited[i][0] == false)
                dfs(i,0,board,visited);
        for(int i = 0; i < m; i++)
            if(board[i][n-1] == 'O' && visited[i][n-1] == false)
                dfs(i,n-1,board,visited);
        for(int j = 0; j < n; j++)
            if(board[0][j] == 'O' && visited[0][j] == false)
                dfs(0,j,board,visited);
        for(int j = 0; j < n; j++)
            if(board[m-1][j] == 'O' && visited[m-1][j] == false)
                dfs(m-1,j,board,visited);
        
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(board[i][j] == 'O' && visited[i][j] == false)
                    board[i][j] = 'X';
        
    }
};
