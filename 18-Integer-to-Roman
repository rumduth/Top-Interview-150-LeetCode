class Solution {
public:
    string intToRoman(int num) {
        unordered_map<int, string> m = {
            {1,"I"},
            {4,"IV"},
            {5,"V"},
            {9,"IX"},
            {10,"X"},
            {40,"XL"},
            {50,"L"},
            {90,"XC"},
            {100,"C"},
            {400,"CD"},
            {500,"D"},
            {900,"CM"},
            {1000,"M"}
        };
        string ans;
       
        while(num>=1000)
        {
            ans += m[1000];
            num -= 1000;
        }
        while(num >= 900)
        {
            ans += m[900];
            num -= 900;
        }
        while(num >= 500)
        {
            ans += m[500];
            num -= 500;
        }
        while(num >= 400)
        {
            ans += m[400];
            num -= 400;
        }
        while(num >= 100)
        {
            ans += m[100];
            num -= 100;
        }
        while(num >= 90)
        {
            ans += m[90];
            num -= 90;
        }
        while(num >= 50)
        {
            ans += m[50];
            num -= 50;
        }
        while(num >= 40)
        {
            ans += m[40];
            num -= 40;
        }
        while(num >= 10)
        {
            ans += m[10];
            num -= 10;
        }
        while(num >= 9)
        {
            ans += m[9];
            num -= 9;
        }
        while(num >= 5)
        {
            ans += m[5];
            num -= 5;
        }
        while(num >= 4)
        {
            ans += m[4];
            num -= 4;
        }
        while(num >= 1)
        {
            ans += m[1];
            num -= 1;
        }
        return ans;
    }
};

Time Complexity: O(N)
Space Complexity: O(1)
