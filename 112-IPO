There are two ways:

First Solution I came up with:
Time Complexity: O(N^2LogN)
class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        vector<pair<int,int>> v;
        for(int i = 0; i < capital.size(); i++)
            v.push_back({profits[i], capital[i]});
        k = min(k,static_cast<int>(v.size()));
        priority_queue<pair<int,int>> pq;
        for(int i = 0; i < v.size(); i++)
            pq.push(v[i]);
        while(!pq.empty())
        {
            vector<pair<int,int>> a;
            while(!pq.empty() && pq.top().second > w)
            {
                a.push_back(pq.top());
                pq.pop();
            }
            if(pq.empty())
                return w;
            w += pq.top().first;
            pq.pop();
            k--;
            if(k == 0)
                return w;
            for(int i = 0; i < a.size(); i++)
                pq.push(a[i]);
        }
        return 1;
    }
};

Second Solution: more optimized: Time Complexity: O(NlogN)

class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        vector<pair<int,int>> v;
        for(int i = 0; i < capital.size(); i++)
            v.push_back({capital[i], profits[i]});
        sort(v.begin(), v.end());
        for(auto& i : v)
            swap(i.first,i.second);
        int index = 0;
        priority_queue<pair<int,int>> pq;
        int n = profits.size();
        k = min(n,k);
        while(true)
        {
            while(index < n && w >= v[index].second)
            {
                pq.push(v[index]);
                index++;
            }
            if(pq.empty())
                return w;
            
            w += pq.top().first;
            pq.pop();
            k--;
            if(k == 0)
                return w;
        }
        return 1;
        
    }
};
