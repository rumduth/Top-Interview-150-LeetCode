class Trie {
public:
    struct TrieNode
    {
        bool isTerminal;
        vector<TrieNode*> next;
        TrieNode()
        {
            isTerminal = false;
            next.resize(26);
            for(auto& i : next) i = NULL;
        }
    };
    TrieNode* root;
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* r = root;
        for(int i = 0; i < word.size(); i++)
        {
            if(r->next[word[i] - 'a'] == NULL)
                r->next[word[i]-'a'] = new TrieNode();
            r = r->next[word[i]-'a'];
        }
        r->isTerminal = true;
        return;
    }
    
    bool search(string word) {
        TrieNode* r = root;
        for(int i = 0; i < word.size(); i++)
        {
            if(r->next[word[i] - 'a'] == NULL)
                return false;
            r = r->next[word[i] - 'a'];
        }
        return r->isTerminal;
    }
    
    bool startsWith(string prefix) {
        TrieNode* r = root;
        for(int i = 0; i < prefix.size(); i++)
        {
            if(r->next[prefix[i] - 'a'] == NULL)
                return false;
            r = r->next[prefix[i] - 'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
