class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        int n = words.size();
        int l = words[0].size();
        if(s.size() < n*l)
            return {};
        vector<int> ans;
        unordered_map<string, int> c;
        for(auto& i: words)
            c[i]++;
        for(int i = 0; i <= s.size() - n*l; i++)
        {
            if(!c.count(s.substr(i,l)))
                continue;
            string b = s.substr(i,n*l);
            unordered_map<string, int> d;
            bool found = true;
            for(int j = 0; j < n; j++)
            {
                string a = b.substr(j*l,l);
                d[a]++;
                if(d[a] > c[a])
                {
                    found = false;
                    break;
                }
            }
            if(found)
               ans.push_back(i);
        }
        return ans;
    }
};

Time Complexity: O(N*M)
Space Complexity: O(N)
