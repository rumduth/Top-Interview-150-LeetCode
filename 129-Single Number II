First Solution:

Space Complexity: O(1), because i keep v size is 32 bits in all cases
Time Complexity: O(N)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans = 0;
        vector<int> v;
        for(int i = 0; i < 32; i++)
        {
            int bits = 0;
            for(int j = 0; j < nums.size(); j++)
            {
                bits += (nums[j] & 1);
                nums[j] = nums[j] >> 1;
            }
            bits = bits % 3;
            v.push_back(bits);
        }
        for(int i = 0; i < v.size(); i++)
        {
            ans = ans << 1;
            ans += v[31-i];
        }
        return ans;
    }
};

Second Solution: May be a little bit more good in Space Complexity:
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans = 0;
        for(int i = 0; i < 32; i++)
        {
            int bits = 0;
            for(int j = 0; j < nums.size(); j++)
            {
                bits += (nums[j] & 1);
                nums[j] = nums[j] >> 1;
            }
            bits = bits % 3;
            ans += bits << i;
        }
        
        return ans;
    }
};
